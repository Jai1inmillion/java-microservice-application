pipeline {
  agent any

  environment {
   // SONAR_URL = "http://34.201.116.83:9000"
    DOCKER_IMAGE = "jaihanspal/ultimate-cicd:${BUILD_NUMBER}"
    GIT_REPO_NAME = "java-microservice-application"
    GIT_USER_NAME = "Jai1inmillion"
  }

  stages {

    stage('Checkout') {
      steps {
        echo 'passed'
        checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/Jai1inmillion/java-microservice-application.git']]])
      }
    }

    stage('Build and Test') {
      steps {
        powershell '''
          Get-ChildItem -Force
          mvn -v
          mvn clean package
        '''
      }
    }
	
	stage('Build and Push Docker Image') {
     environment {
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          // Build the image via PowerShell
          powershell '''
            docker build -t "$env:DOCKER_IMAGE" .
          '''
          // Push using Docker Pipeline helper (works on Windows as long as Docker CLI is available)
          def img = docker.image(env.DOCKER_IMAGE)
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            img.push()
          }
        }
      }
    }
	
	    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          powershell '''
            git config user.email "jaihanspal@gmail.com"
            git config user.name  "Jai1inmillion"
            $manifestTemplate = "deployment.yml"
            $manifest = "argoconfig/deployment.yml"
            (Get-Content $manifestTemplate) -replace 'replaceImageTag', "$env:BUILD_NUMBER" | Set-Content $manifest
            git add $manifest
            git commit -m "Update deployment image to version $env:BUILD_NUMBER"
            git push "https://${env:GITHUB_TOKEN}@github.com/${env:GIT_USER_NAME}/${env:GIT_REPO_NAME}" HEAD:main
          '''
        }
      }
    }

    
    
  }
}